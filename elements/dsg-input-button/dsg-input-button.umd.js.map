{"version":3,"file":"dsg-input-button.umd.js","sources":["dsg-input-button.umd.js"],"sourcesContent":["/**\n * Copyright 2019 Amy\n * @license MIT, see License.md for full text.\n */\nimport { LitElement, html } from '@polymer/lit-element';\n\n/**\n * `dsg-input-button`\n * `input button`\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @customElement\n * @lit-html\n * @lit-element\n * @demo demo/index.html\n */\nclass DsgInputButton extends LitElement {\n  \n  // render function\n  render() {\n    return html`\n<style>:host {\n  display: block;\n}\n\n:host([hidden]) {\n  display: none;\n}\n</style>\n<slot></slot>\n<div>${this.onClick}</div>\n<div>${this.id}</div>`;\n  }\n\n  // properties available to the custom element for data binding\n  static get properties() {\n    return {\n  \"onClick\": {\n    \"name\": \"onClick\",\n    \"type\": \"String\",\n    \"value\": \"\",\n    \"reflectToAttribute\": false,\n    \"observer\": false\n  },\n  \"id\": {\n    \"name\": \"id\",\n    \"type\": \"String\",\n    \"value\": \"\",\n    \"reflectToAttribute\": false,\n    \"observer\": false\n  }\n};\n  }\n\n  /**\n   * Store the tag name to make it easier to obtain directly.\n   * @notice function name must be here for tooling to operate correctly\n   */\n  tag() {\n    return \"dsg-input-button\";\n  }\n\n  // life cycle\n  constructor() {\n    super();\n    \n  }\n  /**\n   * life cycle, element is afixed to the DOM\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    \n  }\n  // static get observedAttributes() {\n  //   return [];\n  // }\n  // disconnectedCallback() {}\n\n  // attributeChangedCallback(attr, oldValue, newValue) {}\n  \n}\ncustomElements.define(\"dsg-input-button\", DsgInputButton);\nexport { DsgInputButton };\n"],"names":["DsgInputButton","LitElement","html","this","onClick","id","customElements","define"],"mappings":"o9CAkBMA,2YAAuBC,yDAIlBC,WAUJC,KAAKC,QACLD,KAAKE,wCA4BD,8DAvBA,SACE,MACD,eACA,eACC,uBACa,YACV,MAER,MACI,UACA,eACC,uBACa,YACV,sHAiChBC,eAAeC,OAAO,mBAAoBP"}