{
  "version": 3,
  "file": "custom-input.umd.js",
  "sources": ["custom-input.umd.js"],
  "sourcesContent": [
    "/**\n * Copyright 2019 Amy\n * @license MIT, see License.md for full text.\n */\nimport { LitElement, html } from \"@polymer/lit-element\";\n\n/**\n * `custom-input`\n * `input element `\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @customElement\n * @lit-html\n * @lit-element\n * @demo demo/index.html\n */\nclass CustomInput extends LitElement {\n  \n  // render function\n  render() {\n    return html`\n<style>:host {\n  display: block;\n}\n\n:host([hidden]) {\n  display: none;\n}\n\ninput {\n  background: #FFFFFF;\n  border-radius: 20px;\n  border-style: none;\n  font-size: 25px;\n  font-family: Roboto;\n  font-style: normal;\n  font-weight: bold;\n  line-height: normal;\n}\n\ninput:focus {\n  outline: none;\n}</style>\n<input\n  id=${this.inputId}\n  type=\"text\"\n  value=${this.city}\n  @input=${this.handleInput}\n/>`;\n  }\n\n  // properties available to the custom element for data binding\n  static get properties() {\n    return {\n  \"city\": {\n    \"name\": \"city\",\n    \"type\": \"String\",\n    \"value\": \" \",\n    \"reflectToAttribute\": false,\n    \"observer\": false\n  },\n  \"inputId\": {\n    \"name\": \"inputId\",\n    \"type\": \"String\",\n    \"value\": \" \",\n    \"reflectToAttribute\": false,\n    \"observer\": false\n  }\n}\n;\n  }\n\n  /**\n   * Store the tag name to make it easier to obtain directly.\n   * @notice function name must be here for tooling to operate correctly\n   */\n  tag() {\n    return \"custom-input\";\n  }\n\n  // life cycle\n  constructor() {\n    super();\n    this.city = \"\";\n    this.inputId = \"\";\n  }\n\n  handleInput(e) {\n    this.city = e.target.value;\n  }\n  /**\n   * life cycle, element is afixed to the DOM\n   */\n  connectedCallback() {\n    super.connectedCallback();\n  }\n  // static get observedAttributes() {\n  //   return [];\n  // }\n  // disconnectedCallback() {}\n\n  // attributeChangedCallback(attr, oldValue, newValue) {}\n}\ncustomElements.define(\"custom-input\", CustomInput);\nexport { CustomInput };\n"
  ],
  "names": [
    "CustomInput",
    "city",
    "inputId",
    "LitElement",
    "html",
    "this",
    "handleInput",
    "e",
    "target",
    "value",
    "customElements",
    "define"
  ],
  "mappings": "ysDAkBMA,yKAmEGC,KAAO,KACPC,QAAU,iPApEIC,yDAIZC,WAwBJC,KAAKH,QAEFG,KAAKJ,KACJI,KAAKC,iDA8BL,uDAxBA,MACD,MACE,YACA,eACC,wBACa,YACV,WAEH,MACD,eACA,eACC,wBACa,YACV,+CAqBFC,QACLN,KAAOM,EAAEC,OAAOC,iHAezBC,eAAeC,OAAO,YAAaX"
}
